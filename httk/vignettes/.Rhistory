simobsfull$simconc > 0 &
simobsfull$obsconc > 0]) -
log10(simobsfull$obsconc[
!is.na(simobsfull$simconc) &
simobsfull$simconc > 0 &
simobsfull$obsconc > 0])),
na.rm = T)
totalaic <- nrow(
simobsfull[
!is.na(simobsfull$simconc) &
simobsfull$simconc >0 &
simobsfull$obsconc >
0,]) *
(log(2*pi) +
1 +
log((sum(
(simobsfull$obsconc[
!is.na(simobsfull$simconc) &
simobsfull$simconc > 0 &
simobsfull$obsconc > 0] -
simobsfull$simconc[
!is.na(simobsfull$simconc) &
simobsfull$simconc > 0 &
simobsfull$obsconc > 0])^2,
na.rm=T) /
nrow(simobsfull[
!is.na(simobsfull$simconc) &
simobsfull$simconc > 0 &
simobsfull$obsconc > 0,])))) +
((44+1)*2) #44 is the number of parameters from inhalation_inits.R
mispred <- table(abs(
log10(simobsfull$simconc) -
log10(simobsfull$obsconc))>2 &
simobsfull$simconc>0)
mispred[2]
mispred[2] / nrow(simobsfull[
!is.na(simobsfull$simconc) &
simobsfull$simconc >0 &
simobsfull$obsconc > 0,])*100
overpred <- table(
log10(simobsfull$simconc) -
log10(simobsfull$obsconc)>2 &
simobsfull$simconc>0)
overpred[2]
overpred[2] / nrow(simobsfull[
!is.na(simobsfull$simconc) &
simobsfull$simconc >0 &
simobsfull$obsconc > 0,])*100
underpred <- table(
log10(simobsfull$obsconc) -
log10(simobsfull$simconc)>2 &
simobsfull$simconc>0)
underpred[2]
underpred[2] / nrow(simobsfull[
!is.na(simobsfull$simconc) &
simobsfull$simconc >0 &
simobsfull$obsconc > 0,])*100
mispredhalf <- table(abs(
log10(simobsfull$simconc) -
log10(simobsfull$obsconc))>0.5 &
simobsfull$simconc>0)
mispredhalf[2]
mispredhalf[2] / nrow(simobsfull[
!is.na(simobsfull$simconc) &
simobsfull$simconc >0 &
simobsfull$obsconc > 0,])*100
overpredhalf <- table(
log10(simobsfull$simconc) -
log10(simobsfull$obsconc)>0.5 &
simobsfull$simconc>0)
overpredhalf[2]
overpredhalf[2] / nrow(simobsfull[
!is.na(simobsfull$simconc) &
simobsfull$simconc >0 &
simobsfull$obsconc > 0,])*100
underpredhalf <- table(
log10(simobsfull$obsconc) -
log10(simobsfull$simconc)>0.5 &
simobsfull$simconc>0)
underpredhalf[2]
underpredhalf[2] / nrow(simobsfull[
!is.na(simobsfull$simconc) &
simobsfull$simconc > 0 &
simobsfull$obsconc > 0,])*100
chemunderpred <- subset(simobsfull,
log10(simobsfull$simconc) -
log10(simobsfull$obsconc) < 0 &
simobsfull$simconc > 0)
table(chemunderpred$chemclass) / table(simobsfull$chemclass)*100
fig2 <- ggplot(
data = simobsfull[
simobsfull$simconc > 0 &
simobsfull$obsconc > 0,],
aes(x = log10(simconc), y = log10(obsconc))) +
geom_point(
color = ifelse(
abs(
log10(simobsfull[
simobsfull$simconc > 0 &
simobsfull$obsconc > 0,]$simconc) -
log10(simobsfull[
simobsfull$simconc > 0 &
simobsfull$obsconc > 0,]$obsconc)) >2,
'red',
'black')) +
geom_abline() +
xlab("Log(Simulated Concentrations)") +
ylab("Log(Observed Concentrations)") +
theme_bw() +
geom_smooth(method = 'lm',se = F, aes(color = 'Overall')) +
geom_smooth(method = 'lm', se = F, aes(color = species)) +
geom_text(
x = Inf,
y = -Inf,
hjust = 1.05,
vjust = -0.15,
#    size = 6,
label = paste0(
"Regression slope: ",
round(summary(lmall)$coef[2,1],digits = 2),
"\nRegression R^2: ",
round(summary(lmall)$r.squared,digits = 2),
"\nRegression RMSE: ",
round(sqrt(mean(lmall$residuals^2)),digits = 2),
"\nRMSE (Identity): ",
round(totalrmse,digits = 2),
"\n% Missing:",
round(pmiss, digits = 2), "%")) +
geom_text(
data = simobsfull[
abs(log10(simobsfull$simconc) - log10(simobsfull$obsconc))>7 &
simobsfull$simconc>0 & simobsfull$obsconc > 0,],
aes(label = paste(chem,species,matrix)),
fontface = 'bold',
check_overlap = T,
#    size = 3.5,
hjust = 0.5,
vjust = -0.8) +
scale_color_discrete(name = 'Species', breaks = c("Overall","Human","Rat")) #+
#  theme(
#    plot.title = element_text(face = 'bold', size = 15),
#    axis.title.x = element_text(face = 'bold', size = 20),
#    axis.text.x = element_text(size=16),
#    axis.title.y = element_text(face = 'bold', size = 20),
#    axis.text.y = element_text(size = 16),
#    legend.title = element_text(face = 'bold', size = 16),
#    legend.text = element_text(face = 'bold',size = 14))
fig2 #Display plot in R
#pdf("Figure2.pdf", width = 10, height = 10)
#print(fig2)
#dev.off()
# Create data and run calculations for populating plots
cmaxfull <- subset(simobsfull, !duplicated(simobsfull$AUCobs) & simobsfull$Cmaxobs != 0)
cmaxlm <- lm(log10(cmaxfull$Cmaxobs)~log10(cmaxfull$Cmaxsim), na.action = na.exclude)
cmaxfull$Cmaxobs
cmaxfull$Cmaxsim
cmaxlm <- lm(log10(cmaxfull$Cmaxobs)~log10(cmaxfull$Cmaxsim),na.rm=T)
help(lm)
# Create data and run calculations for populating plots
cmaxfull <- subset(simobsfull, !duplicated(simobsfull$AUCobs) & simobsfull$Cmaxobs != 0)
obs <- cmaxfull$Cmaxobs
sim <- cmaxfull$Cmaxsim
obs <- obs[!is.nan(sim)]
sim <- sim[!is.nan(sim)]
cmaxlm <- lm(log10(obs)~log10(sim), na.action = na.exclude)
log10(sim)
# Create data and run calculations for populating plots
cmaxfull <- subset(simobsfull, !duplicated(simobsfull$AUCobs) & simobsfull$Cmaxobs != 0)
obs <- cmaxfull$Cmaxobs
sim <- cmaxfull$Cmaxsim
obs <- obs[!is.nan(sim)]
sim <- sim[!is.nan(sim)]
sim[!is.finite(log10(sim))] <- NA
cmaxlm <- lm(log10(obs)~log10(sim), na.action = na.exclude)
cmaxvcbkg <- subset(cmaxfull,
paste(
cmaxfull$chem,
cmaxfull$dose,
cmaxfull$explen,
cmaxfull$species,
cmaxfull$matrix) %in%
paste(
t0df$chem,
t0df$dose,
t0df$explen,
t0df$species,
t0df$matrix))
cmaxvcbkg$cmaxcbkgratio <- cmaxvcbkg$Cmaxobs / cmaxvcbkg$obsconc
cmaxvcbkg$adjustedCmaxsim <- cmaxvcbkg$Cmaxsim - cmaxvcbkg$obsconc
aucfull <-subset(simobsfull,
!duplicated(simobsfull$AUCobs) &
simobsfull$AUCobs != 0)
auclm <- lm(log10(aucfull$AUCobs)~log10(aucfull$AUCsim), na.action = na.exclude)
# Create data and run calculations for populating plots
cmaxfull <- subset(simobsfull, !duplicated(simobsfull$AUCobs) & simobsfull$Cmaxobs != 0)
cmaxobs <- cmaxfull$Cmaxobs
cmaxsim <- cmaxfull$Cmaxsim
cmaxobs <- cmaxobs[!is.nan(cmaxsim)]
cmaxsim <- cmaxsim[!is.nan(cmaxsim)]
cmaxsim[!is.finite(log10(cmaxsim))] <- NA
cmaxlm <- lm(log10(cmaxobs)~log10(cmaxsim), na.action = na.exclude)
cmaxvcbkg <- subset(cmaxfull,
paste(
cmaxfull$chem,
cmaxfull$dose,
cmaxfull$explen,
cmaxfull$species,
cmaxfull$matrix) %in%
paste(
t0df$chem,
t0df$dose,
t0df$explen,
t0df$species,
t0df$matrix))
cmaxvcbkg$cmaxcbkgratio <- cmaxvcbkg$Cmaxobs / cmaxvcbkg$obsconc
cmaxvcbkg$adjustedCmaxsim <- cmaxvcbkg$Cmaxsim - cmaxvcbkg$obsconc
aucfull <-subset(simobsfull,
!duplicated(simobsfull$AUCobs) &
simobsfull$AUCobs != 0)
auclm <- lm(log10(aucfull$AUCobs)~log10(aucfull$AUCsim), na.action = na.exclude)
# Create data and run calculations for populating plots
cmaxfull <- subset(simobsfull, !duplicated(simobsfull$AUCobs) & simobsfull$Cmaxobs != 0)
cmaxobs <- cmaxfull$Cmaxobs
cmaxsim <- cmaxfull$Cmaxsim
cmaxobs <- cmaxobs[!is.nan(cmaxsim)]
cmaxsim <- cmaxsim[!is.nan(cmaxsim)]
cmaxsim[!is.finite(log10(cmaxsim))] <- NA
cmaxlm <- lm(log10(cmaxobs)~log10(cmaxsim), na.action = na.exclude)
cmaxvcbkg <- subset(cmaxfull,
paste(
cmaxfull$chem,
cmaxfull$dose,
cmaxfull$explen,
cmaxfull$species,
cmaxfull$matrix) %in%
paste(
t0df$chem,
t0df$dose,
t0df$explen,
t0df$species,
t0df$matrix))
cmaxvcbkg$cmaxcbkgratio <- cmaxvcbkg$Cmaxobs / cmaxvcbkg$obsconc
cmaxvcbkg$adjustedCmaxsim <- cmaxvcbkg$Cmaxsim - cmaxvcbkg$obsconc
aucfull <-subset(simobsfull,
!duplicated(simobsfull$AUCobs) &
simobsfull$AUCobs != 0)
aucobs <- aucfull$AUCobs
aucsim <- aucfull$AUCsim
aucobs <- aucobs[!is.nan(aucsim)]
aucsim <- aucsim[!is.nan(aucsim)]
aucsim[!is.finite(log10(aucsim))] <- NA
auclm <- lm(log10(aucfull$AUCobs)~log10(aucfull$AUCsim), na.action = na.exclude)
# Create data and run calculations for populating plots
cmaxfull <- subset(simobsfull, !duplicated(simobsfull$AUCobs) & simobsfull$Cmaxobs != 0)
cmaxobs <- cmaxfull$Cmaxobs
cmaxsim <- cmaxfull$Cmaxsim
cmaxobs <- cmaxobs[!is.nan(cmaxsim)]
cmaxsim <- cmaxsim[!is.nan(cmaxsim)]
cmaxsim[!is.finite(log10(cmaxsim))] <- NA
cmaxlm <- lm(log10(cmaxobs)~log10(cmaxsim), na.action = na.exclude)
cmaxvcbkg <- subset(cmaxfull,
paste(
cmaxfull$chem,
cmaxfull$dose,
cmaxfull$explen,
cmaxfull$species,
cmaxfull$matrix) %in%
paste(
t0df$chem,
t0df$dose,
t0df$explen,
t0df$species,
t0df$matrix))
cmaxvcbkg$cmaxcbkgratio <- cmaxvcbkg$Cmaxobs / cmaxvcbkg$obsconc
cmaxvcbkg$adjustedCmaxsim <- cmaxvcbkg$Cmaxsim - cmaxvcbkg$obsconc
aucfull <-subset(simobsfull,
!duplicated(simobsfull$AUCobs) &
simobsfull$AUCobs != 0)
aucobs <- aucfull$AUCobs
aucsim <- aucfull$AUCsim
aucobs <- aucobs[!is.nan(aucsim)]
aucsim <- aucsim[!is.nan(aucsim)]
aucsim[!is.finite(log10(aucsim))] <- NA
auclm <- lm(log10(aucobs)~log10(aucsim), na.action = na.exclude)
cmaxslope <- summary(cmaxlm)$coef[2,1]
cmaxrsq <- summary(cmaxlm)$r.squared
totalrmsecmax <- sqrt(mean((log10(cmaxfull$Cmaxsim) -
log10(cmaxfull$Cmaxobs))^2, na.rm = T))
cmaxmiss <- nrow(cmaxfull[
abs(log10(cmaxfull$Cmaxsim) -
log10(cmaxfull$Cmaxobs)) > 1,])
cmaxmissp <- nrow(cmaxfull[
abs(log10(cmaxfull$Cmaxsim) -
log10(cmaxfull$Cmaxobs)) > 1,]) /
nrow(cmaxfull) * 100
cmaxmisschem <- table(cmaxfull[
abs(log10(cmaxfull$Cmaxsim) -
log10(cmaxfull$Cmaxobs)) > 1,]$chem)
aucslope <- summary(auclm)$coef[2,1]
aucrsq <- summary(auclm)$r.squared
totalrmseauc <- sqrt(mean((
log10(aucfull$AUCsim) -
log10(aucfull$AUCobs))^2, na.rm = T))
aucmiss <- nrow(aucfull[
abs(log10(aucfull$AUCsim) -
log10(aucfull$AUCobs)) > 1,])
aucmissp <- nrow(aucfull[
abs(log10(aucfull$AUCsim) -
log10(aucfull$AUCobs)) > 1,]) /
nrow(aucfull) * 100
aucmisschem <- table(aucfull[
abs(log10(aucfull$AUCsim) -
log10(aucfull$AUCobs)) > 1,]$chem)
# Create data and run calculations for populating plots
cmaxfull <- subset(simobsfull, !duplicated(simobsfull$AUCobs) & simobsfull$Cmaxobs != 0)
cmaxobs <- cmaxfull$Cmaxobs
cmaxsim <- cmaxfull$Cmaxsim
cmaxobs <- cmaxobs[!is.nan(cmaxsim)]
cmaxsim <- cmaxsim[!is.nan(cmaxsim)]
cmaxsim[!is.finite(log10(cmaxsim))] <- NA
cmaxlm <- lm(log10(cmaxobs)~log10(cmaxsim), na.action = na.exclude)
cmaxvcbkg <- subset(cmaxfull,
paste(
cmaxfull$chem,
cmaxfull$dose,
cmaxfull$explen,
cmaxfull$species,
cmaxfull$matrix) %in%
paste(
t0df$chem,
t0df$dose,
t0df$explen,
t0df$species,
t0df$matrix))
cmaxvcbkg$cmaxcbkgratio <- cmaxvcbkg$Cmaxobs / cmaxvcbkg$obsconc
cmaxvcbkg$adjustedCmaxsim <- cmaxvcbkg$Cmaxsim - cmaxvcbkg$obsconc
aucfull <-subset(simobsfull,
!duplicated(simobsfull$AUCobs) &
simobsfull$AUCobs != 0)
aucobs <- aucfull$AUCobs
aucsim <- aucfull$AUCsim
aucobs <- aucobs[!is.nan(aucsim)]
aucsim <- aucsim[!is.nan(aucsim)]
aucsim[!is.finite(log10(aucsim))] <- NA
auclm <- lm(log10(aucobs)~log10(aucsim), na.action = na.exclude)
cmaxslope <- summary(cmaxlm)$coef[2,1]
cmaxrsq <- summary(cmaxlm)$r.squared
totalrmsecmax <- sqrt(mean((log10(cmaxfull$Cmaxsim) -
log10(cmaxfull$Cmaxobs))^2, na.rm = T))
cmaxmiss <- nrow(cmaxfull[
abs(log10(cmaxfull$Cmaxsim) -
log10(cmaxfull$Cmaxobs)) > 1,])
cmaxmissp <- nrow(cmaxfull[
abs(log10(cmaxfull$Cmaxsim) -
log10(cmaxfull$Cmaxobs)) > 1,]) /
nrow(cmaxfull) * 100
cmaxmisschem <- table(cmaxfull[
abs(log10(cmaxfull$Cmaxsim) -
log10(cmaxfull$Cmaxobs)) > 1,]$chem)
aucslope <- summary(auclm)$coef[2,1]
aucrsq <- summary(auclm)$r.squared
totalrmseauc <- sqrt(mean((
log10(aucfull$AUCsim) -
log10(aucfull$AUCobs))^2, na.rm = T))
aucmiss <- nrow(aucfull[
abs(log10(aucfull$AUCsim) -
log10(aucfull$AUCobs)) > 1,])
aucmissp <- nrow(aucfull[
abs(log10(aucfull$AUCsim) -
log10(aucfull$AUCobs)) > 1,]) /
nrow(aucfull) * 100
aucmisschem <- table(aucfull[
abs(log10(aucfull$AUCsim) -
log10(aucfull$AUCobs)) > 1,]$chem)
knitr::opts_chunk$set(echo = TRUE, fig.width=5, fig.height=4)
library(httk)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(ggrepel)
library(dplyr)
library(stringr)
library(forcats)
library(smatr)
# Delete all objects from memory:
rm(list=ls())
# We love to give warning messages whenever assumptions are used by HTTK,
# but they will overwhelm the output of this vignette so we turn them
# off:
options(warn = -1)
met_data <- metabolism_data_Linakis2020
conc_data <- concentration_data_Linakis2020
# Small molecule chemicals
summary(met_data$AVERAGE_MASS)
# Generally more lipophilic chemicals
summary(met_data$OCTANOL_WATER_PARTITION_LOGP_OPERA_PRED)
# Unsurprisingly then, the chemicals are generally less water-soluble
summary(met_data$WATER_SOLUBILITY_MOL.L_OPERA_PRED)
# ~60% of samples in humans
table(conc_data$CONC_SPECIES)/nrow(conc_data)*100
# ~72% of samples are from blood
table(conc_data$SAMPLING_MATRIX)/nrow(conc_data)*100
# Create a dataframe with 1 row for each unique external exposure scenario
unique_scenarios <- conc_data[with(conc_data,
order(PREFERRED_NAME,
CONC_SPECIES,
SAMPLING_MATRIX,
as.numeric(as.character(DOSE)),EXP_LENGTH,-TIME)),] %>%
distinct(DTXSID,DOSE,DOSE_U,EXP_LENGTH,CONC_SPECIES,SAMPLING_MATRIX, .keep_all = TRUE)
plist <- list()
simlist <- list()
obslist <- list()
for(i in 1:nrow(unique_scenarios)){
#tryCatch({
relconc <- subset(conc_data,conc_data$DTXSID == unique_scenarios$DTXSID[i] &
conc_data$DOSE == unique_scenarios$DOSE[i] &
conc_data$EXP_LENGTH == unique_scenarios$EXP_LENGTH[i] &
conc_data$CONC_SPECIES == unique_scenarios$CONC_SPECIES[i] &
conc_data$SAMPLING_MATRIX == unique_scenarios$SAMPLING_MATRIX[i])
obslist[[i]] <- relconc
name <- paste0("out",i)
if(as.character(unique_scenarios$CONC_SPECIES[i]) == "Human"){
solve <- assign(name, solve_gas_pbtk(
chem.cas = unique_scenarios$CASRN[i],
days = (unique_scenarios$TIME[i]+unique_scenarios$EXP_LENGTH[i]),
# Make sure we get conc's at the observed times:
times=signif(obslist[[i]]$TIME,4),
tsteps = 500,
exp.conc = ((as.numeric(unique_scenarios$DOSE[i])*1e20*1000)/24450)/1e20,
exp.duration = unique_scenarios$EXP_LENGTH[i]*24,
period = (unique_scenarios$TIME[i]+unique_scenarios$EXP_LENGTH[i])*24,
species = as.character(unique_scenarios$CONC_SPECIES[i]),
vmax.km = F,
vmax = met_data$VMAX[met_data$CASRN %in% unique_scenarios$CASRN[i] &
met_data$SPECIES == unique_scenarios$CONC_SPECIES[i]],
km = met_data$KM[met_data$CASRN %in% unique_scenarios$CASRN[i] &
met_data$SPECIES == unique_scenarios$CONC_SPECIES[i]],
suppress.messages=T))
} else {
solve <- assign(name, solve_gas_pbtk(
chem.cas = unique_scenarios$CASRN[i],
days = (unique_scenarios$TIME[i]+unique_scenarios$EXP_LENGTH[i]),
# Make sure we get conc's at the observed times:
times=signif(obslist[[i]]$TIME,4),
tsteps = 500,
exp.conc = ((as.numeric(unique_scenarios$DOSE[i])*1e20*1000)/24450)/1e20,
exp.duration = unique_scenarios$EXP_LENGTH[i]*24,
period = (unique_scenarios$TIME[i]+unique_scenarios$EXP_LENGTH[i])*24,
species = as.character(unique_scenarios$CONC_SPECIES[i]),
vmax.km = T,
vmax = met_data$VMAX[met_data$CASRN %in% unique_scenarios$CASRN[i] &
met_data$SPECIES == unique_scenarios$CONC_SPECIES[i]],
km = met_data$KM[met_data$CASRN %in% unique_scenarios$CASRN[i] &
met_data$SPECIES == unique_scenarios$CONC_SPECIES[i]],
suppress.messages=T))
}
#browser()
solve <- as.data.frame(solve)
# Sets the output units appropriate for the sampling matrix
if (unique_scenarios$SAMPLING_MATRIX[i] == "VBL" |
unique_scenarios$SAMPLING_MATRIX[i] == "BL" |
unique_scenarios$SAMPLING_MATRIX[i] == "BL (+W)")
{
solve$simconc <- solve$Cven
solve$unit <- "uM"
} else if (unique_scenarios$SAMPLING_MATRIX[i] == "ABL") {
solve$simconc <- solve$Cart
solve$unit <- "uM"
} else if (unique_scenarios$SAMPLING_MATRIX[i] == "EB" |
unique_scenarios$SAMPLING_MATRIX[i] == "EEB" |
unique_scenarios$SAMPLING_MATRIX[i] == "EB (+W)")
{
solve$simconc <- solve$Cendexh * 24.45
solve$unit <- "ppm"
} else if (unique_scenarios$SAMPLING_MATRIX[i] == "MEB") {
solve$simconc <- solve$Cmixexh * 24.45
solve$unit <- "ppm"
} else if (unique_scenarios$SAMPLING_MATRIX[i] == "PL"){
solve$simconc <- solve$Cplasma
solve$unit <- "uM"
} else {
solve$simconc <- NA
solve$unit <- NA
}
simlist[[i]] <- solve
plot.data <- solve
name1 <- paste0("c.vs.t",i)
#Right now this is only calculating real concentrations according to mg/L in blood
plots <- assign(name1, ggplot(plot.data, aes(time*24, simconc)) +
geom_line() +
xlab("Time (h)") +
ylab(paste0("Simulated ",
unique_scenarios$SAMPLING_MATRIX[i],
"\nConcentration (" ,
solve$unit, ")")) +
ggtitle(paste0(
unique_scenarios$PREFERRED_NAME[i],
" (",
unique_scenarios$CONC_SPECIES[i],
", ",
round(as.numeric(unique_scenarios$DOSE[i]), digits = 2),
unique_scenarios$DOSE_U[i],
" for ",
round(unique_scenarios$EXP_LENGTH[i]*24, digits = 2),
"h in ",
unique_scenarios$SAMPLING_MATRIX[i], ")")) +
geom_point(data = relconc, aes(TIME*24,CONCENTRATION)) +
theme(text = element_text(size=10))+
theme_bw())
plist[[i]] <- plots
#}, error = function(e){})
}
