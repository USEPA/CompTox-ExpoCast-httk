
R Under development (unstable) (2023-04-16 r84269 ucrt) -- "Unsuffered Consequences"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #R CMD BATCH --vanilla httk-for-dashboard.R
> 
> library(httk)
> library(parallel)
> library(data.table)
> 
> # Clear the memory:
> rm(list=ls())
> 
> prev.table <- read.csv("Dashboard-HTTK-CssunitsmgpL.txt",sep="\t")
> write.table(
+   prev.table,
+   file=paste(
+     "Dashboard-HTTK-CssunitsmgpL-previous.txt",sep=""),
+   row.names=F,
+   quote=F,
+   sep="\t")
>   
> #setwd("L:/Lab/NCCT_ExpoCast/ExpoCast2019/HTTKDataTable/")
> # Number of samples for Monte Carlo, default is 1000, but this is more stable:
> NUM.SAMPLES <- 1e4
>  
> # For reproducible Monte Carlo
> RANDOM.SEED <- 123456
>           
> # Which quantiles to provide from Monte Carlo:
> WHICH.QUANTILES <- c(0.5,0.95)          
>  
> # For which species do we want predictions:
> SPECIES.LIST <- c("Human","Rat")
> 
> # For which TK models do we want Css predictions:
> MODELS.LIST <- c("3compartmentss","PBTK")
> 
> # How many processors are available for parallel computing:
> NUM.CPU <- detectCores()-1
>  
> # Add the in silico predictions:
> # Categorical QSPR:
> load_dawson2021()
Chemicals outside the applicabilty domain are excluded when predictions were loaded.
Loading CLint and Fup predictions from Dawson et al. (2021) for 9055 chemicals.
Existing data are not being overwritten.
Please wait...
> # ADmet Predictor:
> load_sipes2017()
Loading CLint and Fup predictions from Sipes et al. (2017) for 8758 chemicals.
Existing data are not being overwritten.
Please wait...
> # Machine learning model:
> load_pradeep2020()
Loading CLint and Fup predictions from Pradeep et al. (2020) for 8573 chemicals.
Existing data are not being overwritten.
Please wait...
> # Caco-2 QSPR:
> load_honda2023()
Chemicals outside the applicabilty domain are excluded when predictions were loaded.
Loading Caco2 PAb predictions from Honda et al. (2023) for 12440 chemicals.
Existing data are not being overwritten.
Please wait...
>  
> # Find all the duplicates:
> # First eliminat NA DTXSIDs (can't do logical tests on them)
> chem.physical_and_invitro.data <- subset(chem.physical_and_invitro.data,
+                                          !is.na(DTXSID))
> # Now check for duplicated DTXSIDs:
> dup.chems <- chem.physical_and_invitro.data$DTXSID[
+   duplicated((chem.physical_and_invitro.data$DTXSID))]
> length(dup.chems)
[1] 8
> # Now check for duplicated CASRN and grab the DTXSIDs of any chemicals with
> # duplicated CAS (but unique DTXSIDs):
> dup.chems <- unique(dup.chems,
+                     subset(chem.physical_and_invitro.data, CAS %in%
+                     chem.physical_and_invitro.data$CAS[
+                       duplicated((chem.physical_and_invitro.data$CAS))])$DTXSID)
> length(dup.chems)
[1] 8
> 
> # Among the duplicates, try to keep the predictions from Dawson 2021:
> for (this.chem in dup.chems)
+ {
+   these.dup.rows <- which(chem.physical_and_invitro.data$DTXSID==this.chem)
+   keep.row <- NULL
+   for(this.row in these.dup.rows)
+     if (regexpr("Dawson",
+                 chem.physical_and_invitro.data[this.row,
+                                                "Human.Clint.Reference"])!=-1
+       ) keep.row <- this.row
+   these.dup.rows <- these.dup.rows[these.dup.rows!=keep.row]
+   chem.physical_and_invitro.data <- chem.physical_and_invitro.data[
+     -these.dup.rows,]
+ }
> 
> # Check to make sure no duplicates left:
> chem.physical_and_invitro.data <- subset(chem.physical_and_invitro.data,
+                                          !is.na(DTXSID))
> dup.chems <- chem.physical_and_invitro.data$DTXSID[
+   duplicated((chem.physical_and_invitro.data$DTXSID))]
> length(dup.chems)
[1] 0
> dup.chems <- unique(dup.chems,
+                     subset(chem.physical_and_invitro.data, CAS %in%
+                     chem.physical_and_invitro.data$CAS[
+                       duplicated((chem.physical_and_invitro.data$CAS))])$DTXSID)
> # This should be true:
> length(dup.chems) == 0
[1] TRUE
> 
> 
> # Organize HTTK data by species:
> HTTK.data.list <- list()
> all.ids <- NULL
> for (this.species in SPECIES.LIST)
+ {
+   HTTK.data.list[[this.species]] <- get_cheminfo(
+     info=c(
+       "Compound",
+       "CAS",
+       "DTXSID",
+       "Clint",
+       "Funbound.plasma"),
+     fup.lod.default = 0,
+     median.only=TRUE,
+     species=this.species)
+ # Create a master list of the chemical DTXSID's:
+   all.ids <- sort(unique(c(all.ids,HTTK.data.list[[this.species]]$DTXSID)))
+ }
There were 11 warnings (use warnings() to see them)
> 
> # We want one parameter per line, but the code is pretty different wrt how we
> # retrieve/calculate these values:
> param.list <- c("Clint","Fup","Vd","Days.Css","TK.Half.Life","Css")
> units.list <- list()
> units.list[["Clint"]] <- "uL/min/million hepatocytes"
> units.list[["Fup"]] <- ""
> units.list[["Vd"]] <- "L/kg"
> units.list[["Days.Css"]] <- "Days"
> units.list[["TK.Half.Life"]] <- "hours"
> units.list[["Css"]] <- "mg/L"
> 
> # Function to create all the rows of info for a particular chemical:
> make.ccd.table <- function(
+   this.id,
+   HTTK.data.list,
+   species.list,
+   model.list,
+   param.list,
+   units.list,
+   all.ids,
+   RANDOM.SEED,
+   which.quantiles,
+   num.samples
+   ) {
+   # Total number of unique chemicals:
+   num.chems <- length(all.ids)
+   
+   # Initialize the local (chemical-specific) dashboard table:
+   dashboard.table <- NULL
+   
+   print(paste(this.id,"-",which(this.id==all.ids),"of",num.chems))
+   for (this.species in species.list) {
+   print(this.species)
+     if (this.id %in% HTTK.data.list[[this.species]]$DTXSID) {
+       HTTK.data <- HTTK.data.list[[this.species]]
+       default.to.human=FALSE
+     } else {
+       HTTK.data <- HTTK.data.list[["Human"]]
+       default.to.human=TRUE
+     }
+     HTTK.index <- which(HTTK.data$DTXSID==this.id)
+ # Test to see if we found this chemical in HTTK.data:
+     if (length(HTTK.index) >0) {
+       for (this.param in param.list) {
+         this.row <- data.frame(
+           DTXSID=this.id,
+           Parameter=this.param,
+           Measured=NA,
+           Predicted=NA,
+           Units= units.list[[this.param]],
+           Model=NA,
+           Reference=NA,
+           Percentile=NA,
+           Species=this.species,
+           Data.Source.Species=ifelse(this.species=="Human" |
+                                      default.to.human,"Human","Rat"))
+   # Clint:
+         if (this.param == "Clint") {
+           clint.ref <- subset(chem.physical_and_invitro.data,DTXSID==this.id)[,
+             paste(this.row["Data.Source.Species"],"Clint.Reference",sep=".")]
+           if (is.na(clint.ref))
+           {
+             this.row$Measured <- HTTK.data.list[["Human"]][
+               HTTK.data.list[["Human"]]$DTXSID==this.id,4]
+             this.row$Data.Source.Species <- "Human"
+           } else if (clint.ref == "Sipes 2017") {
+             this.row$Predicted <- HTTK.data[HTTK.index,4]
+             this.row$Model <- "ADMet"
+           } else {
+             this.row$Measured <- HTTK.data[HTTK.index,4]
+           }
+           this.row$Reference <- clint.ref
+           dashboard.table <- rbind(dashboard.table, this.row)
+   # Fup:
+         } else if (this.param == "Fup") {
+           fup.ref <- subset(chem.physical_and_invitro.data,DTXSID==this.id)[,
+             paste(this.row["Data.Source.Species"],"Funbound.plasma.Reference",sep=".")]
+           if (is.na(fup.ref)) {
+             this.row$Measured <- HTTK.data.list[["Human"]][
+               HTTK.data.list[["Human"]]$DTXSID==this.id,5]
+             this.row$Data.Source.Species <- "Human"        
+           } else if (fup.ref == "Sipes 2017") {
+             this.row$Predicted <- HTTK.data[HTTK.index,5]
+             this.row$Model <- "ADMet"
+           } else {
+             this.row$Measured <- HTTK.data[HTTK.index,5]
+           }
+           this.row$Reference <- fup.ref
+           dashboard.table <- rbind(dashboard.table, this.row)
+   # Vd:
+         } else if (this.param == "Vd") {
+           #check for Fup >0 (can't do Vd otherwise):
+           if (HTTK.data[HTTK.index,5] > 0)
+           {
+             this.vd <- try(calc_vdist(dtxsid=this.id,
+               default.to.human=default.to.human,
+               species=this.species))
+             if (!inherits(this.vd, "try-error")) { 
+               this.row$Predicted <- this.vd
+               this.row$Model <- "1compartment"
+               dashboard.table <- rbind(dashboard.table, this.row)
+             }
+           }
+   # TK.Half.Life:
+         } else if (this.param == "TK.Half.Life") {
+           #check for Fup >0 (can't do Vd otherwise):
+           if (HTTK.data[HTTK.index,5] > 0) {
+             # need cas because of bug with DTXSID's:
+             this.cas <- HTTK.data[HTTK.index,"CAS"]
+             this.tkhalflife <- try(calc_half_life(chem.cas=this.cas,
+                 default.to.human=default.to.human,
+                 species=this.species))
+             if (!inherits(this.tkhalflife, "try-error")) { 
+               this.row$Model <- "1compartment"
+               this.row$Predicted <- this.tkhalflife
+               dashboard.table <- rbind(dashboard.table, this.row)
+             }
+           }
+   # Days to Css:
+         } else if (this.param == "Days.Css") {
+           #check for Fup >0 (can't do pbtk otherwise):
+           if (HTTK.data[HTTK.index,5] > 0) {
+             this.dayscss <- try(calc_css(dtxsid=this.id,
+               species=this.species,
+               default.to.human=default.to.human)$the.day)
+             if (!inherits(this.dayscss, "try-error")) { 
+               this.row$Predicted <- this.dayscss
+               this.row$Model <- "PBTK"
+               dashboard.table <- rbind(dashboard.table, this.row)
+             }
+           }
+   # Css:
+         } else if (this.param == "Css") {
+           for (this.model in model.list)
+           {
+             if (HTTK.data[HTTK.index,5] > 0 | this.model=="3compartmentss") {
+               this.row$Model <- this.model
+               parameterize.arg.list = list(
+                 default.to.human = default.to.human, 
+                 clint.pvalue.threshold = 0.05,
+                 restrictive.clearance = TRUE, 
+                 regression = TRUE)
+               # For reproducible pseudo-random numbers:
+               set.seed(RANDOM.SEED)
+               this.css <-try(calc_mc_css(chem.cas=this.cas,
+                 which.quantile=which.quantiles,
+                 samples=num.samples,
+                 output.units="mg/L",
+                 species=this.species,
+                 model=this.model,
+                 parameterize.arg.list=parameterize.arg.list))
+               if (!inherits(this.css, "try-error")) {
+                 for (this.quantile in names(this.css))
+                 {
+                   this.row$Predicted <- this.css[this.quantile]
+                   this.row$Percentile <- this.quantile
+                   dashboard.table <- rbind(dashboard.table, this.row)
+                 }
+               }
+             }
+           }     
+         }
+       }
+     }
+   }
+   return(dashboard.table)
+ }
> 
> if (NUM.CPU == 1)
+ {
+ # Non-parallel version:
+ dashboard.list <- NULL
+ for (this.id in all.ids)
+   dashboard.list[[this.id]] <-   make.ccd.table(
+     this.id=this.id,
+     HTTK.data.list=HTTK.data.list,
+     species.list=SPECIES.LIST,
+     model.list=MODELS.LIST,
+     param.list=param.list,
+     units.list=units.list,
+     all.ids=all.ids,
+     RANDOM.SEED=RANDOM.SEED,
+     which.quantiles=WHICH.QUANTILES,
+     num.samples=NUM.SAMPLES
+   )
+ } else {
+   # Create a multicore cluster:
+   cl <- parallel::makeCluster(NUM.CPU)
+   
+   # Load httk on all cores:
+   clusterEvalQ(cl, library(httk))
+   # Clear memory all cores:
+   clusterEvalQ(cl, rm(list=ls()))
+   
+   # Dawson 2021:
+   clusterEvalQ(cl, load_dawson2021())
+   # ADmet Predictor:
+   clusterEvalQ(cl, load_sipes2017())
+   # Machine learning model:
+   clusterEvalQ(cl, load_pradeep2020())
+   # Caco-2 QSPR:
+   clusterEvalQ(cl, load_honda2023())
+ 
+   # Define the table creator function on all cores:
+   clusterExport(cl, "make.ccd.table")
+   # Share data with all cores:
+   clusterExport(cl, c(
+     "chem.physical_and_invitro.data",
+     "HTTK.data.list",
+     "SPECIES.LIST",
+     "MODELS.LIST",
+     "param.list",
+     "units.list",
+     "all.ids",
+     "RANDOM.SEED",
+     "WHICH.QUANTILES",
+     "NUM.SAMPLES"))
+   
+   # Create a list with one table per chemical:
+   dashboard.list <- clusterApply(cl,
+                                  all.ids,
+                                  function(x)
+     make.ccd.table(
+       this.id=x,
+       HTTK.data.list=HTTK.data.list,
+       species.list=SPECIES.LIST,
+       model.list=MODELS.LIST,
+       param.list=param.list,
+       units.list=units.list,
+       all.ids=all.ids,
+       RANDOM.SEED=RANDOM.SEED,
+       which.quantiles=WHICH.QUANTILES,
+       num.samples=NUM.SAMPLES
+       ))
+   
+   stopCluster(cl)
+ }

Execution halted
